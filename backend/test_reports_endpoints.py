#!/usr/bin/env python
"""
üß™ SCRIPT DE PRUEBA PARA ENDPOINTS DE REPORTES

Este script prueba todos los endpoints de reportes implementados
en la Fase 8.1 del sistema de citas m√©dicas.

üéØ OBJETIVO: Verificar que todos los endpoints funcionen correctamente
üí° CONCEPTO: Pruebas automatizadas de la API de reportes
"""

import os
import sys
import django
from datetime import datetime, timedelta
import json

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
django.setup()

from django.test import Client
from django.contrib.auth import get_user_model
from apps.users.models import User
from apps.patients.models import Patient
from apps.doctors.models import Doctor
from apps.appointments.models import Appointment
from django.utils import timezone
from rest_framework_simplejwt.tokens import RefreshToken


class ReportsEndpointTester:
    """
    Clase para probar todos los endpoints de reportes.
    """
    
    def __init__(self):
        self.client = Client()
        self.admin_user = None
        self.admin_token = None
        self.setup_test_data()
    
    def setup_test_data(self):
        """
        Crear datos de prueba necesarios para los reportes.
        """
        print("üîß Configurando datos de prueba...")
        
        # Crear usuario administrador
        try:
            self.admin_user = User.objects.get(email='admin@test.com')
        except User.DoesNotExist:
            self.admin_user = User.objects.create_user(
                username='admin_reports',
                email='admin@test.com',
                password='admin123',
                first_name='Admin',
                last_name='Reports',
                role='admin'
            )
        
        # Generar token JWT
        refresh = RefreshToken.for_user(self.admin_user)
        self.admin_token = str(refresh.access_token)
        
        # Configurar headers de autenticaci√≥n
        self.client.defaults['HTTP_AUTHORIZATION'] = f'Bearer {self.admin_token}'
        
        print(f"‚úÖ Usuario admin creado: {self.admin_user.email}")
        print(f"‚úÖ Token generado: {self.admin_token[:20]}...")
    
    def test_basic_stats(self):
        """
        Probar endpoint de estad√≠sticas b√°sicas.
        """
        print("\nüìä Probando endpoint de estad√≠sticas b√°sicas...")
        
        response = self.client.get('/api/reports/stats/basic/')
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Estad√≠sticas b√°sicas obtenidas exitosamente:")
            print(f"   - Total de citas: {data.get('total_appointments', 0)}")
            print(f"   - Total de pacientes: {data.get('total_patients', 0)}")
            print(f"   - Total de doctores: {data.get('total_doctors', 0)}")
            print(f"   - Citas hoy: {data.get('appointments_today', 0)}")
            print(f"   - Citas esta semana: {data.get('appointments_this_week', 0)}")
            print(f"   - Citas completadas: {data.get('completed_appointments', 0)}")
            return True
        else:
            print(f"‚ùå Error en estad√≠sticas b√°sicas: {response.content.decode()}")
            return False
    
    def test_appointments_by_period(self):
        """
        Probar endpoint de citas por per√≠odo.
        """
        print("\nüìÖ Probando endpoint de citas por per√≠odo...")
        
        # Probar sin par√°metros (√∫ltimo mes por defecto)
        response = self.client.get('/api/reports/appointments/period/')
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Reporte de citas por per√≠odo obtenido exitosamente:")
            print(f"   - Per√≠odo: {data.get('period', {})}")
            print(f"   - Registros encontrados: {len(data.get('data', []))}")
            
            # Probar con par√°metros espec√≠ficos
            today = timezone.now().date()
            start_date = today - timedelta(days=7)
            
            response2 = self.client.get(
                f'/api/reports/appointments/period/?start_date={start_date}&end_date={today}'
            )
            
            if response2.status_code == 200:
                print("‚úÖ Filtros de fecha funcionando correctamente")
                return True
            else:
                print(f"‚ùå Error con filtros: {response2.content.decode()}")
                return False
        else:
            print(f"‚ùå Error en reporte por per√≠odo: {response.content.decode()}")
            return False
    
    def test_popular_doctors(self):
        """
        Probar endpoint de doctores populares.
        """
        print("\nüë®‚Äç‚öïÔ∏è Probando endpoint de doctores populares...")
        
        response = self.client.get('/api/reports/doctors/popular/')
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Reporte de doctores populares obtenido exitosamente:")
            print(f"   - Per√≠odo: {data.get('period', {})}")
            print(f"   - Doctores encontrados: {len(data.get('data', []))}")
            
            # Mostrar algunos doctores si existen
            doctors = data.get('data', [])
            for i, doctor in enumerate(doctors[:3]):
                print(f"   - {i+1}. {doctor.get('doctor_name')} ({doctor.get('specialization')})")
                print(f"      Citas totales: {doctor.get('total_appointments')}")
            
            return True
        else:
            print(f"‚ùå Error en doctores populares: {response.content.decode()}")
            return False
    
    def test_cancellation_metrics(self):
        """
        Probar endpoint de m√©tricas de cancelaciones.
        """
        print("\n‚ùå Probando endpoint de m√©tricas de cancelaciones...")
        
        response = self.client.get('/api/reports/cancellations/metrics/')
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            metrics = data.get('metrics', {})
            print("‚úÖ M√©tricas de cancelaciones obtenidas exitosamente:")
            print(f"   - Total de cancelaciones: {metrics.get('total_cancellations', 0)}")
            print(f"   - Tasa de cancelaci√≥n: {metrics.get('cancellation_rate', 0)}%")
            print(f"   - Cancelaciones por mes: {len(metrics.get('cancellations_by_month', []))} registros")
            print(f"   - Cancelaciones por doctor: {len(metrics.get('cancellations_by_doctor', []))} registros")
            
            return True
        else:
            print(f"‚ùå Error en m√©tricas de cancelaciones: {response.content.decode()}")
            return False
    
    def test_dashboard_summary(self):
        """
        Probar endpoint de resumen del dashboard.
        """
        print("\nüéØ Probando endpoint de resumen del dashboard...")
        
        response = self.client.get('/api/reports/dashboard/summary/')
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            quick_stats = data.get('quick_stats', {})
            print("‚úÖ Resumen del dashboard obtenido exitosamente:")
            print(f"   - Citas hoy: {quick_stats.get('appointments_today', 0)}")
            print(f"   - Citas pendientes: {quick_stats.get('pending_appointments', 0)}")
            print(f"   - Total pacientes: {quick_stats.get('total_patients', 0)}")
            print(f"   - Doctores activos: {quick_stats.get('active_doctors', 0)}")
            print(f"   - Citas pr√≥xima semana: {data.get('upcoming_appointments', 0)}")
            print(f"   - Tendencia semanal: {data.get('weekly_trend', 0)}")
            
            return True
        else:
            print(f"‚ùå Error en resumen del dashboard: {response.content.decode()}")
            return False
    
    def test_authentication_required(self):
        """
        Probar que los endpoints requieren autenticaci√≥n.
        """
        print("\nüîí Probando que los endpoints requieren autenticaci√≥n...")
        
        # Crear cliente sin autenticaci√≥n
        unauth_client = Client()
        
        endpoints = [
            '/api/reports/stats/basic/',
            '/api/reports/appointments/period/',
            '/api/reports/doctors/popular/',
            '/api/reports/cancellations/metrics/',
        ]
        
        all_protected = True
        for endpoint in endpoints:
            response = unauth_client.get(endpoint)
            if response.status_code != 401:
                print(f"‚ùå Endpoint {endpoint} no est√° protegido (status: {response.status_code})")
                all_protected = False
            else:
                print(f"‚úÖ Endpoint {endpoint} requiere autenticaci√≥n")
        
        return all_protected
    
    def run_all_tests(self):
        """
        Ejecutar todas las pruebas de endpoints de reportes.
        """
        print("üöÄ INICIANDO PRUEBAS DE ENDPOINTS DE REPORTES")
        print("=" * 60)
        
        tests = [
            ('Autenticaci√≥n requerida', self.test_authentication_required),
            ('Estad√≠sticas b√°sicas', self.test_basic_stats),
            ('Citas por per√≠odo', self.test_appointments_by_period),
            ('Doctores populares', self.test_popular_doctors),
            ('M√©tricas de cancelaciones', self.test_cancellation_metrics),
            ('Resumen del dashboard', self.test_dashboard_summary),
        ]
        
        results = []
        for test_name, test_func in tests:
            try:
                result = test_func()
                results.append((test_name, result))
            except Exception as e:
                print(f"‚ùå Error en {test_name}: {str(e)}")
                results.append((test_name, False))
        
        # Resumen final
        print("\n" + "=" * 60)
        print("üìã RESUMEN DE PRUEBAS:")
        
        passed = 0
        for test_name, result in results:
            status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
            print(f"   {test_name}: {status}")
            if result:
                passed += 1
        
        print(f"\nüéØ RESULTADO FINAL: {passed}/{len(results)} pruebas pasaron")
        
        if passed == len(results):
            print("üéâ ¬°Todos los endpoints de reportes funcionan correctamente!")
            return True
        else:
            print("‚ö†Ô∏è  Algunos endpoints necesitan revisi√≥n")
            return False


if __name__ == '__main__':
    print("üß™ INICIANDO PRUEBAS DE ENDPOINTS DE REPORTES")
    print("Este script verifica que todos los endpoints implementados funcionen correctamente.\n")
    
    tester = ReportsEndpointTester()
    success = tester.run_all_tests()
    
    if success:
        print("\n‚úÖ Todos los endpoints de reportes est√°n funcionando correctamente.")
        print("üöÄ El sistema est√° listo para la Fase 8.1!")
        sys.exit(0)
    else:
        print("\n‚ùå Algunos endpoints necesitan correcci√≥n.")
        print("üîß Revisa los errores mostrados arriba.")
        sys.exit(1)