#!/usr/bin/env python
"""
Script para probar las tareas de email de Celery.
Este script verifica que las tareas de notificaci√≥n de citas funcionen correctamente.
"""

import os
import sys
import django
from datetime import datetime, timedelta

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
django.setup()

from core.tasks import (
    send_appointment_confirmation_email,
    send_appointment_reminder_email,
    send_appointment_cancellation_email,
    send_bulk_appointment_reminders
)
from django.utils import timezone

def test_email_tasks():
    """
    Prueba todas las tareas de email con datos de ejemplo.
    """
    print("üß™ INICIANDO PRUEBAS DE TAREAS DE EMAIL")
    print("=" * 50)
    
    # Datos de ejemplo para las pruebas
    sample_appointment_data = {
        'patient_email': 'paciente@ejemplo.com',
        'patient_name': 'Mar√≠a Gonz√°lez',
        'doctor_name': 'Dr. Carlos Rodr√≠guez',
        'doctor_specialty': 'Cardiolog√≠a',
        'appointment_date': '2024-02-15',
        'appointment_time': '10:30 AM',
        'clinic_address': 'Av. Principal 123, Ciudad',
        'clinic_phone': '+1 234-567-8900',
        'appointment_notes': 'Traer estudios previos y ayunar 12 horas',
        'reschedule_url': 'https://clinica.com/reprogramar/abc123',
        'cancel_url': 'https://clinica.com/cancelar/abc123',
        'preparation_instructions': 'Ayuno de 12 horas antes del examen',
        'fasting_required': True,
        'fasting_hours': 12,
        'fasting_start_time': '10:30 PM',
        'confirm_url': 'https://clinica.com/confirmar/abc123',
        'emergency_phone': '+1 234-567-8911',
        'cancellation_date': timezone.now(),
        'cancellation_reason': 'Emergencia m√©dica del doctor',
        'cancelled_by_patient': False,
        'refund_info': 'El reembolso se procesar√° en 3-5 d√≠as h√°biles',
        'available_slots_url': 'https://clinica.com/horarios-disponibles',
        'suggested_dates': ['2024-02-16', '2024-02-17', '2024-02-18'],
        'contact_phone': '+1 234-567-8900',
        'contact_email': 'contacto@clinica.com',
        'feedback_url': 'https://clinica.com/feedback'
    }
    
    try:
        # Test 1: Email de confirmaci√≥n
        print("\nüìß Prueba 1: Email de Confirmaci√≥n de Cita")
        print("-" * 40)
        result = send_appointment_confirmation_email.delay(sample_appointment_data)
        print(f"‚úÖ Tarea enviada con ID: {result.id}")
        print(f"üìÑ Resultado: {result.get(timeout=10)}")
        
        # Test 2: Email de recordatorio
        print("\nüìß Prueba 2: Email de Recordatorio de Cita")
        print("-" * 40)
        result = send_appointment_reminder_email.delay(sample_appointment_data)
        print(f"‚úÖ Tarea enviada con ID: {result.id}")
        print(f"üìÑ Resultado: {result.get(timeout=10)}")
        
        # Test 3: Email de cancelaci√≥n
        print("\nüìß Prueba 3: Email de Cancelaci√≥n de Cita")
        print("-" * 40)
        result = send_appointment_cancellation_email.delay(sample_appointment_data)
        print(f"‚úÖ Tarea enviada con ID: {result.id}")
        print(f"üìÑ Resultado: {result.get(timeout=10)}")
        
        # Test 4: Recordatorios masivos
        print("\nüìß Prueba 4: Recordatorios Masivos")
        print("-" * 40)
        result = send_bulk_appointment_reminders.delay()
        print(f"‚úÖ Tarea enviada con ID: {result.id}")
        print(f"üìÑ Resultado: {result.get(timeout=10)}")
        
        print("\nüéâ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE")
        print("=" * 50)
        print("\nüìù NOTAS IMPORTANTES:")
        print("‚Ä¢ Los emails se est√°n enviando a la consola (development mode)")
        print("‚Ä¢ Para env√≠o real, configura SMTP en settings/production.py")
        print("‚Ä¢ Revisa la consola del worker de Celery para ver los logs")
        print("‚Ä¢ Las plantillas HTML se est√°n renderizando correctamente")
        
    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {str(e)}")
        print("\nüîß POSIBLES SOLUCIONES:")
        print("‚Ä¢ Verifica que Redis est√© ejecut√°ndose")
        print("‚Ä¢ Inicia el worker de Celery: celery -A config worker --loglevel=info")
        print("‚Ä¢ Verifica que las plantillas existan en templates/emails/")
        print("‚Ä¢ Revisa la configuraci√≥n de email en settings")
        return False
    
    return True

def test_template_rendering():
    """
    Prueba que las plantillas se rendericen correctamente sin enviar emails.
    """
    print("\nüé® PROBANDO RENDERIZADO DE PLANTILLAS")
    print("=" * 50)
    
    from django.template.loader import render_to_string
    
    sample_data = {
        'patient_name': 'Mar√≠a Gonz√°lez',
        'doctor_name': 'Dr. Carlos Rodr√≠guez',
        'doctor_specialty': 'Cardiolog√≠a',
        'appointment_date': '2024-02-15',
        'appointment_time': '10:30 AM',
        'clinic_address': 'Av. Principal 123, Ciudad',
        'clinic_phone': '+1 234-567-8900',
    }
    
    templates = [
        'emails/appointment_confirmation.html',
        'emails/appointment_reminder.html',
        'emails/appointment_cancellation.html'
    ]
    
    for template in templates:
        try:
            html_content = render_to_string(template, sample_data)
            print(f"‚úÖ {template}: Renderizado exitoso ({len(html_content)} caracteres)")
        except Exception as e:
            print(f"‚ùå {template}: Error - {str(e)}")
            return False
    
    print("\nüéâ Todas las plantillas se renderizaron correctamente")
    return True

if __name__ == '__main__':
    print("üöÄ INICIANDO PRUEBAS DEL SISTEMA DE EMAIL")
    print("=" * 60)
    
    # Primero probar el renderizado de plantillas
    if test_template_rendering():
        # Luego probar las tareas de Celery
        test_email_tasks()
    else:
        print("‚ùå Las pruebas de plantillas fallaron. Revisa la configuraci√≥n.")
        sys.exit(1)