#!/usr/bin/env python
"""
Script para validar la configuraci√≥n de producci√≥n del sistema de citas m√©dicas.
Verifica que todas las variables de entorno necesarias est√©n configuradas.
"""

import os
import sys
from pathlib import Path

# Configurar Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))

# Primero importar decouple para verificar variables
try:
    from decouple import config
except ImportError as e:
    print(f"‚ùå Error importando decouple: {e}")
    sys.exit(1)

def validate_production_config():
    """Valida la configuraci√≥n de producci√≥n."""
    print("üîç VALIDANDO CONFIGURACI√ìN DE PRODUCCI√ìN")
    print("=" * 50)
    
    errors = []
    warnings = []
    
    # Variables cr√≠ticas requeridas para producci√≥n
    critical_vars = {
        'SECRET_KEY': 'Clave secreta de Django',
        'ALLOWED_HOSTS': 'Hosts permitidos',
        'CORS_ALLOWED_ORIGINS': 'Or√≠genes CORS permitidos',
    }
    
    # Variables de base de datos (solo para PostgreSQL)
    db_vars = {
        'DB_NAME': 'Nombre de la base de datos',
        'DB_USER': 'Usuario de la base de datos', 
        'DB_PASSWORD': 'Contrase√±a de la base de datos',
        'DB_HOST': 'Host de la base de datos',
    }
    
    # Variables opcionales pero recomendadas
    optional_vars = {
        'EMAIL_HOST_USER': 'Usuario de email SMTP',
        'EMAIL_HOST_PASSWORD': 'Contrase√±a de email SMTP',
        'REDIS_URL': 'URL de Redis para cache',
        'CELERY_BROKER_URL': 'URL del broker de Celery',
    }
    
    print("üìã Verificando variables cr√≠ticas:")
    for var, description in critical_vars.items():
        try:
            value = config(var, default='')
            if value and value != 'your-super-secret-key-here-change-in-production':
                print(f"  ‚úÖ {var}: {description}")
            elif not value:
                errors.append(f"‚ùå {var}: {description} - NO CONFIGURADA")
            else:
                errors.append(f"‚ùå {var}: {description} - USAR VALOR DE EJEMPLO")
        except Exception:
            errors.append(f"‚ùå {var}: {description} - ERROR AL LEER")
    
    print("\nüìã Verificando variables de base de datos:")
    db_engine = config('DB_ENGINE', default='django.db.backends.sqlite3')
    if 'postgresql' in db_engine:
        print("  üîç Detectado PostgreSQL, verificando variables...")
        for var, description in db_vars.items():
            try:
                value = config(var, default='')
                if value:
                    print(f"    ‚úÖ {var}: {description}")
                else:
                    errors.append(f"‚ùå {var}: {description} - REQUERIDA para PostgreSQL")
            except Exception:
                errors.append(f"‚ùå {var}: {description} - ERROR AL LEER")
    else:
        print(f"  ‚ö†Ô∏è  Usando {db_engine} - Recomendado PostgreSQL para producci√≥n")
    
    print("\nüìã Verificando variables opcionales:")
    for var, description in optional_vars.items():
        try:
            value = config(var, default='')
            if value:
                print(f"  ‚úÖ {var}: {description}")
            else:
                warnings.append(f"‚ö†Ô∏è  {var}: {description} - NO CONFIGURADA")
        except Exception:
            warnings.append(f"‚ö†Ô∏è  {var}: {description} - ERROR AL LEER")
    
    # Verificar configuraci√≥n b√°sica
    print("\nüìã Verificando configuraci√≥n b√°sica:")
    
    # Verificar DEBUG
    debug_value = config('DEBUG', default='True')
    if debug_value.lower() == 'false':
        print("  ‚úÖ DEBUG: False (correcto para producci√≥n)")
    else:
        warnings.append("‚ö†Ô∏è  DEBUG est√° en True - Cambiar a False para producci√≥n")
    
    # Verificar SECRET_KEY
    secret_key = config('SECRET_KEY', default='')
    if secret_key and 'django-insecure' not in secret_key and len(secret_key) > 20:
        print("  ‚úÖ SECRET_KEY: Configurada correctamente")
    elif 'django-insecure' in secret_key:
        errors.append("‚ùå SECRET_KEY contiene 'django-insecure' - Cambiar por una clave segura")
    else:
        errors.append("‚ùå SECRET_KEY no configurada o muy corta")
    
    # Verificar JWT tokens
    jwt_access = config('JWT_ACCESS_TOKEN_LIFETIME', default='15')
    jwt_refresh = config('JWT_REFRESH_TOKEN_LIFETIME', default='1440')
    print(f"  ‚úÖ JWT configurado: Access {jwt_access}min, Refresh {jwt_refresh}min")
    
    # Mostrar resultados
    print("\n" + "=" * 50)
    
    if errors:
        print("‚ùå ERRORES CR√çTICOS:")
        for error in errors:
            print(f"  {error}")
    
    if warnings:
        print("\n‚ö†Ô∏è  ADVERTENCIAS:")
        for warning in warnings:
            print(f"  {warning}")
    
    if not errors and not warnings:
        print("üéâ ¬°CONFIGURACI√ìN DE PRODUCCI√ìN V√ÅLIDA!")
        return True
    elif not errors:
        print("‚úÖ Configuraci√≥n b√°sica v√°lida (con advertencias)")
        return True
    else:
        print("‚ùå Configuraci√≥n inv√°lida - Corregir errores antes de desplegar")
        return False

def show_deployment_checklist():
    """Muestra una lista de verificaci√≥n para despliegue."""
    print("\nüìã LISTA DE VERIFICACI√ìN PARA DESPLIEGUE:")
    print("=" * 50)
    
    checklist = [
        "‚ñ° Configurar todas las variables de entorno cr√≠ticas",
        "‚ñ° Cambiar SECRET_KEY por una clave segura √∫nica",
        "‚ñ° Configurar base de datos PostgreSQL",
        "‚ñ° Configurar servidor Redis para cache",
        "‚ñ° Configurar SMTP para env√≠o de emails",
        "‚ñ° Configurar dominio en ALLOWED_HOSTS",
        "‚ñ° Configurar URLs del frontend en CORS_ALLOWED_ORIGINS",
        "‚ñ° Configurar certificado SSL/TLS",
        "‚ñ° Configurar servidor web (Nginx/Apache)",
        "‚ñ° Configurar servidor WSGI (Gunicorn/uWSGI)",
        "‚ñ° Configurar logs y monitoreo",
        "‚ñ° Realizar backup de la base de datos",
        "‚ñ° Probar todas las funcionalidades cr√≠ticas",
    ]
    
    for item in checklist:
        print(f"  {item}")

if __name__ == '__main__':
    try:
        is_valid = validate_production_config()
        show_deployment_checklist()
        
        if is_valid:
            print("\nüöÄ Listo para continuar con el despliegue!")
            sys.exit(0)
        else:
            print("\nüõë Corregir errores antes de continuar")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå Error durante la validaci√≥n: {e}")
        sys.exit(1)