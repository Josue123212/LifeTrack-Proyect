#!/usr/bin/env python
"""
üéØ SCRIPT DE DEMOSTRACI√ìN - ENDPOINTS DE REPORTES

Este script demuestra el funcionamiento de todos los endpoints
de reportes implementados en el paso 8.1.
"""

import os
import sys
import django
from datetime import datetime, timedelta

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.utils import timezone
from apps.users.models import User
from apps.doctors.models import Doctor
from apps.patients.models import Patient
from apps.appointments.models import Appointment
from apps.reports.models import SystemMetrics

def create_sample_data():
    """
    Crear datos de muestra para demostrar los reportes
    """
    print("üìä Creando datos de muestra para reportes...")
    
    try:
        # Crear doctores si no existen
        if not Doctor.objects.exists():
            # Crear usuarios para doctores
            doctor_user1 = User.objects.create_user(
                email='doctor1@test.com',
                password='testpass123',
                first_name='Dr. Juan',
                last_name='P√©rez',
                role='doctor'
            )
            
            doctor_user2 = User.objects.create_user(
                email='doctor2@test.com',
                password='testpass123',
                first_name='Dra. Mar√≠a',
                last_name='Gonz√°lez',
                role='doctor'
            )
            
            # Crear doctores
            Doctor.objects.create(
                user=doctor_user1,
                specialization='Cardiolog√≠a',
                license_number='DOC001',
                phone='555-0001'
            )
            
            Doctor.objects.create(
                user=doctor_user2,
                specialization='Pediatr√≠a',
                license_number='DOC002',
                phone='555-0002'
            )
            
            print("‚úÖ Doctores creados")
        
        # Crear pacientes adicionales si es necesario
        if Patient.objects.count() < 3:
            patient_user = User.objects.create_user(
                email='patient2@test.com',
                password='testpass123',
                first_name='Ana',
                last_name='Mart√≠nez',
                role='patient'
            )
            
            Patient.objects.create(
                user=patient_user,
                date_of_birth='1990-05-15',
                phone='555-1002',
                address='Calle 456, Ciudad'
            )
            
            print("‚úÖ Pacientes adicionales creados")
        
        # Crear citas de muestra
        if Appointment.objects.count() < 10:
            doctors = Doctor.objects.all()
            patients = Patient.objects.all()
            
            if doctors.exists() and patients.exists():
                today = timezone.now().date()
                
                # Crear citas para diferentes fechas y estados
                appointments_data = [
                    {'days_ago': 1, 'status': 'completed'},
                    {'days_ago': 2, 'status': 'completed'},
                    {'days_ago': 3, 'status': 'cancelled'},
                    {'days_ago': 5, 'status': 'completed'},
                    {'days_ago': 7, 'status': 'no_show'},
                    {'days_ago': 10, 'status': 'completed'},
                    {'days_ago': 15, 'status': 'cancelled'},
                    {'days_ago': 20, 'status': 'completed'},
                ]
                
                for i, apt_data in enumerate(appointments_data):
                    appointment_date = today - timedelta(days=apt_data['days_ago'])
                    
                    Appointment.objects.get_or_create(
                        patient=patients[i % len(patients)],
                        doctor=doctors[i % len(doctors)],
                        date=appointment_date,
                        time='10:00:00',
                        defaults={
                            'status': apt_data['status'],
                            'reason': f'Consulta {i+1}',
                            'notes': f'Notas de la cita {i+1}'
                        }
                    )
                
                print("‚úÖ Citas de muestra creadas")
        
        # Crear m√©tricas del sistema
        today = timezone.now().date()
        SystemMetrics.objects.get_or_create(
            date=today,
            defaults={
                'total_appointments': Appointment.objects.count(),
                'total_patients': Patient.objects.count(),
                'total_doctors': Doctor.objects.count(),
                'completed_appointments': Appointment.objects.filter(status='completed').count(),
                'cancelled_appointments': Appointment.objects.filter(status='cancelled').count(),
                'no_show_appointments': Appointment.objects.filter(status='no_show').count(),
            }
        )
        
        print("‚úÖ M√©tricas del sistema actualizadas")
        
    except Exception as e:
        print(f"‚ùå Error creando datos: {e}")

def show_reports_summary():
    """
    Mostrar resumen de los datos para reportes
    """
    print("\nüìà RESUMEN DE DATOS PARA REPORTES")
    print("=" * 50)
    
    # Estad√≠sticas b√°sicas
    total_appointments = Appointment.objects.count()
    total_patients = Patient.objects.count()
    total_doctors = Doctor.objects.count()
    completed = Appointment.objects.filter(status='completed').count()
    cancelled = Appointment.objects.filter(status='cancelled').count()
    
    print(f"üìä Total de citas: {total_appointments}")
    print(f"üë• Total de pacientes: {total_patients}")
    print(f"üë®‚Äç‚öïÔ∏è Total de doctores: {total_doctors}")
    print(f"‚úÖ Citas completadas: {completed}")
    print(f"‚ùå Citas canceladas: {cancelled}")
    
    if total_appointments > 0:
        completion_rate = (completed / total_appointments) * 100
        cancellation_rate = (cancelled / total_appointments) * 100
        print(f"üìà Tasa de completitud: {completion_rate:.1f}%")
        print(f"üìâ Tasa de cancelaci√≥n: {cancellation_rate:.1f}%")
    
    print("\nüîó ENDPOINTS DISPONIBLES:")
    print("=" * 30)
    print("‚Ä¢ GET /api/reports/stats/basic/ - Estad√≠sticas b√°sicas")
    print("‚Ä¢ GET /api/reports/appointments/period/ - Citas por per√≠odo")
    print("‚Ä¢ GET /api/reports/doctors/popular/ - Doctores m√°s solicitados")
    print("‚Ä¢ GET /api/reports/cancellations/metrics/ - M√©tricas de cancelaciones")
    print("‚Ä¢ GET /api/reports/dashboard/summary/ - Resumen del dashboard")
    
    print("\nüîê AUTENTICACI√ìN REQUERIDA:")
    print("‚Ä¢ Todos los endpoints requieren autenticaci√≥n")
    print("‚Ä¢ Permisos de administrador necesarios")
    print("‚Ä¢ Usuario de prueba: admin@test.com (superusuario)")
    
    print("\nüìñ DOCUMENTACI√ìN:")
    print("‚Ä¢ Swagger UI: http://127.0.0.1:8001/api/docs/")
    print("‚Ä¢ ReDoc: http://127.0.0.1:8001/api/redoc/")

if __name__ == '__main__':
    print("üöÄ DEMOSTRACI√ìN DE ENDPOINTS DE REPORTES")
    print("=" * 50)
    
    create_sample_data()
    show_reports_summary()
    
    print("\n‚úÖ ¬°Endpoints de reportes listos para usar!")
    print("\nüí° Pr√≥ximos pasos:")
    print("   1. Acceder a la documentaci√≥n en /api/docs/")
    print("   2. Autenticarse con admin@test.com")
    print("   3. Probar cada endpoint de reportes")
    print("   4. Implementar exportaci√≥n CSV (Fase 8.2)")