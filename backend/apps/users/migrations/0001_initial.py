# Generated by Django 5.0.1 on 2025-09-22 17:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Correo electrónico')),
                ('phone', models.CharField(blank=True, help_text='Número de teléfono del usuario', max_length=15, verbose_name='Teléfono')),
                ('role', models.CharField(choices=[('client', 'Cliente'), ('doctor', 'Doctor'), ('secretary', 'Secretario/a'), ('admin', 'Administrador'), ('superadmin', 'Super Administrador')], default='client', help_text='Rol del usuario en el sistema', max_length=20, verbose_name='Rol')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Fecha de nacimiento')),
                ('address', models.TextField(blank=True, help_text='Dirección completa del usuario', verbose_name='Dirección')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(help_text='Token único para la recuperación de contraseña', max_length=64, unique=True, verbose_name='Token')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('expires_at', models.DateTimeField(help_text='Fecha y hora cuando expira el token', verbose_name='Fecha de expiración')),
                ('used', models.BooleanField(default=False, help_text='Indica si el token ya fue utilizado', verbose_name='Usado')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP desde donde se solicitó la recuperación', null=True, verbose_name='Dirección IP')),
                ('user_agent', models.TextField(blank=True, help_text='Información del navegador/dispositivo', verbose_name='User Agent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Token de Recuperación de Contraseña',
                'verbose_name_plural': 'Tokens de Recuperación de Contraseña',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['token'], name='users_passw_token_b56ca3_idx'), models.Index(fields=['user', '-created_at'], name='users_passw_user_id_ee7fc2_idx'), models.Index(fields=['expires_at'], name='users_passw_expires_853bc2_idx')],
            },
        ),
        migrations.CreateModel(
            name='SecretaryProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(help_text='Identificador único del empleado', max_length=20, unique=True, verbose_name='ID de Empleado')),
                ('department', models.CharField(help_text='Departamento donde trabaja la secretaria', max_length=100, verbose_name='Departamento')),
                ('shift_start', models.TimeField(help_text='Hora de inicio del turno de trabajo', verbose_name='Inicio de Turno')),
                ('shift_end', models.TimeField(help_text='Hora de fin del turno de trabajo', verbose_name='Fin de Turno')),
                ('can_manage_appointments', models.BooleanField(default=True, help_text='Permiso para crear, modificar y cancelar citas', verbose_name='Puede Gestionar Citas')),
                ('can_manage_patients', models.BooleanField(default=True, help_text='Permiso para gestionar información de pacientes', verbose_name='Puede Gestionar Pacientes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de Actualización')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='secretary_profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Perfil de Secretario/a',
                'verbose_name_plural': 'Perfiles de Secretarios/as',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['employee_id'], name='users_secre_employe_017d8b_idx'), models.Index(fields=['department'], name='users_secre_departm_93fca9_idx')],
            },
        ),
    ]
